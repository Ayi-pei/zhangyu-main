generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String?   @unique
  username    String    @unique
  password    String
  role        String    @default("USER")
  credits     Int       @default(0)
  balance     Float     @default(0)
  memberLevel String    @default("NORMAL")
  reputation  Int       @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile?
  orders      Order[]
  bets        Bet[]
  cards       Card[]
  exchanges   Exchange[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  type      String   // RECHARGE or WITHDRAW
  amount    Float
  status    String   // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Bet {
  id          String    @id @default(uuid())
  userId      String
  roundNumber String
  betType     String[]
  betAmount   Float
  winAmount   Float     @default(0)
  status      String    @default("pending")  // pending, settled
  isWin       Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  round       GameRound @relation(fields: [roundNumber], references: [roundNumber])

  @@index([userId, status])
  @@index([roundNumber])
  @@index([createdAt])
}

model Card {
  id         String     @id @default(uuid())
  userId     String
  cardNumber String
  cardHolder String
  expiryDate String
  cvv        String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  exchanges  Exchange[]
}

model Exchange {
  id        String   @id @default(uuid())
  userId    String
  cardId    String
  amount    Float
  status    String   // PENDING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
}

model GameRound {
  id          String    @id @default(uuid())
  roundNumber String    @unique
  startTime   DateTime
  endTime     DateTime
  status      String    @default("active")  // active, completed
  result      String[]  @default([])
  bets        Bet[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status, endTime])
  @@index([roundNumber])
} 