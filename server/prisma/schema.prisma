generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  username    String
  password    String
  role        String    @default("USER")
  credits     Int       @default(0)
  memberLevel String    @default("NORMAL")
  reputation  Int       @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile?
  orders      Order[]
  bets        Bet[]
  cards       Card[]
  exchanges   Exchange[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  type      String   // RECHARGE or WITHDRAW
  amount    Float
  status    String   // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Bet {
  id        String   @id @default(uuid())
  userId    String
  amount    Float
  odds      Float
  status    String   // PENDING, WON, LOST
  gameId    String?
  result    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Card {
  id         String     @id @default(uuid())
  userId     String
  cardNumber String
  cardHolder String
  expiryDate String
  cvv        String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  exchanges  Exchange[]
}

model Exchange {
  id        String   @id @default(uuid())
  userId    String
  cardId    String
  amount    Float
  status    String   // PENDING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
}

model GameStats {
  id          String @id @default(uuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
  gamesPlayed Int    @default(0)
  wins        Int    @default(0)
  losses      Int    @default(0)
}

model Game {
  id        String   @id @default(uuid())
  type      String
  status    String
  players   Player[]
  winner    String?
  score     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lottery {
  id          String   @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String   @default("pending")
  participants User[]  @relation("LotteryParticipants")
  winners     User[]   @relation("LotteryWinners")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserStats {
  id            String @id @default(uuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id])
  totalGames    Int    @default(0)
  gamesWon      Int    @default(0)
  totalWinnings Float  @default(0)
  lastGameAt    DateTime?
} 